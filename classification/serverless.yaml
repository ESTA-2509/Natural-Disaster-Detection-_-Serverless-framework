service: classification
app: classification
# org: hungngo22
useDotenv: true
frameworkVersion: "3"

plugins:
  - serverless-better-credentials
  - serverless-dotenv-plugin
  - serverless-s3-replication-plugin
  - serverless-domain-manager
  - serverless-create-global-dynamodb-table
  # - serverless-python-requirements
  - serverless-s3-sync

custom:
  tableName: ${env:TABLE_NAME}
  bucketName: ${env:BUCKET_NAME}-${opt:region}
  pythonRequirements:
    dockerizePip: non-linux
    layer: true
  s3ReplicationPlugin:
    bidirectionalReplicationBuckets:
      - us-east-1: ${env:BUCKET_NAME}-us-east-1
      - ap-southeast-1: ${env:BUCKET_NAME}-ap-southeast-1
    replicationRolePrefixOverride: ${env:BUCKET_NAME}
  customDomain:
    domainName: disaster-${opt:region}.thienlinh.link
    endpointType: 'regional'
    certificateRegion: ${opt:region}
    createRoute53Record: true
  s3Sync:
    - bucketName: ${self:custom.bucketName}
      localDir: ../dashboard/dist
  globalTables:
    regions:
      - us-east-1
      - ap-southeast-1

provider:
  name: aws
  deploymentMethod: direct
  profile: ${env:PROFILE_NAME}
  region: ${opt:region}
  endpointType: regional
  runtime: python3.10
  # s3:
  #   bucketOne:
  #     name: ${self:custom.bucketName}
  #     publicAccessBlockConfiguration:
  #       BlockPublicAcls: false
  #     websiteConfiguration:
  #       IndexDocument: index.html
  #       ErrorDocument: index.html
  #     versioningConfiguration:
  #       Status: Enabled
  iam:
    role:
      statements:
        # Allow functions to list all buckets
        - Effect: Allow
          Action: 's3:ListBucket'
          Resource: '*'
        # Allow functions to read/write objects in a bucket
        - Effect: Allow
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
          Resource:
            - 'arn:aws:s3:::${self:custom.bucketName}/uploads/*'
        - Effect: "Allow"
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
          Resource:
            "Fn::GetAtt":
                - KeyValuesDynamoDBTable
                - Arn
      # ecr:
      #   images:
      #     appimage:
      #       path: ./
  


functions:
  # upload image to the system
  upload:
    handler: api.upload
    # layers:
    #   - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: /upload
          method: POST
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Amzn-Trace-Id
            allowCredentials: false


  # predict class of image
  # predict:
  #   image:
  #     name: appimage
  #   timeout: 900
  #   memorySize: 2048
  #   events:
  #     - s3:
  #         bucket: ${self:custom.bucketName}
  #         event: s3:ObjectCreated:*
  #         rules:
  #           - prefix: uploads/

  predict:
    handler: api.predict
    timeout: 900
    memorySize: 2048
    events:
      - s3:
          bucket: ${self:custom.bucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
          existing: true

  # list all uploaded images
  list:
    handler: api.list
    # layers:
    #   - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: /list
          method: GET
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Amzn-Trace-Id
            allowCredentials: false

resources:
  Resources:
    PublicSite:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        VersioningConfiguration:
          Status: Enabled
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - "GET"
                - "PUT"
              AllowedOrigins:
                - "*"

    PublicSitePolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: PublicSite
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.bucketName}/*

    KeyValuesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.bucketName}.s3.amazonaws.com
              Id: WebApp
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
          Enabled: 'true'
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: WebApp
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'

  Outputs:
    webServiceEndpoint:
      Value:
        Fn::Join:
          - ''
          - - 'https://'
            - Ref: ApiGatewayRestApi
            - '.execute-api.'
            - Ref: AWS::Region
            - '.amazonaws.com/'
            - ${sls:stage}
      Export:
        Name: ${sls:stage}-webServiceEndpoint
package:
  exclude:
    - node_modules/**
    - natural_disaster.h5